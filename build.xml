<?xml version="1.0"?>

<project name="Warriors" basedir="." default="todo" xmlns:jacoco="antlib:org.jacoco.ant">
    <property name="src" value="src"/>
    <property name="test" value="test"/>
    <property name="lib" value="lib"/>
    <property name="classes" value="classes"/>
    <property name="log" value="log"/>

    <property name="package" value="es.unileon.excelbach.warriors"/>

    <!-- Coverage -->
    <property name="coverage.result.dir" location="./coverage_report" />
    <property name="coverage.result.report.dir" location="${coverage.result.dir}/site/jacoco" />
    <property name="coverage.result.exec.file" location="${coverage.result.dir}/jacoco.exec" />

    <!-- Jacoco Configuration -->
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="./lib/jacocoant.jar" />
    </taskdef>

    <target name="clean">
        <delete dir="${classes}"/>
        <delete dir="${log}"/>
        <delete dir="${coverage.result.dir}" />
    </target>

    <target name="compile" depends="clean">
        <mkdir dir="${classes}"/>
        <javac srcdir="${src}" destdir="${classes}" classpath="${lib}" verbose="true" debug="true"/>
    </target>

    <target name="compileTests" depends="compile">
        <mkdir dir="${classes}"/>
        <javac srcdir="${test}" destdir="${classes}" classpath="${lib}/junit-4.8.2.jar" includeantruntime="false"/>
        <echo message="Test compilation...done"/>
    </target>

    <target name="test" depends="compileTests">
        <mkdir dir="${log}"/>
           <!-- Step 2: Wrap test execution with the JaCoCo coverage task -->
            <jacoco:coverage destfile="${coverage.result.exec.file}">
                <junit showoutput="true" printsummary="yes" haltonfailure="no" enabletestlistenerevents="true" fork="true" >

                    <classpath>
                        <pathelement path="${classes}" />
                        <pathelement path="${lib}/junit-4.8.2.jar"/>
                    </classpath>

                    <batchtest todir="${coverage.result.dir}">
                        <fileset dir="${classes}">
                            <!-- Exclude inner classes.dir -->
                            <exclude name="**/*$*.class" />
                            <include name="**/*Test.class" />
                        </fileset>
                    </batchtest>
                    
                    <!-- To dump junit report into a file-->
                    <test name="${package}.AllTests" haltonfailure="no" outfile="TEST-result" todir="${log}">
                        <formatter type="xml"/>
                    </test>
                </junit>
                
            </jacoco:coverage>
    </target>

    <target name="report" depends="test">
        <!-- Step 3: Create coverage report -->
        <jacoco:report>

            <!-- This task needs the collected execution data and ... -->
            <executiondata>
                <file file="${coverage.result.exec.file}" />
            </executiondata>

            <!-- the class files and optional source files ... -->
            <structure name="Coverage with Jacoco">
                <classfiles>
                    <fileset dir="${classes}">
                        <exclude name="**/*Test*.class" />
                    </fileset>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src}" />
                </sourcefiles>
            </structure>

            <!-- to produce reports in different formats. -->
            <html destdir="${coverage.result.report.dir}" />
            <csv destfile="${coverage.result.report.dir}/report.csv" />
            <xml destfile="${coverage.result.report.dir}/report.xml" />
        </jacoco:report>
    
        <echo message="Generating coverage report with jacoco...done"/>

    </target>

    <target name="run" depends="compile">
        <java classname="es.unileon.excelbach.warriors.MainWarriors">
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${lib}"/>
            </classpath>
            <arg value="Menganito"/>
            <arg value="15"/>
            <arg value="Fulanito"/>
            <arg value="15"/>
        </java>
    </target>

    <target name="todo" depends="report, run"/>

</project>
